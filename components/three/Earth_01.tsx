/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useEffect, useRef, useState } from 'react'
import { Html, useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { Object3D, ObjectLoader } from 'three'
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'
import { useFrame } from '@react-three/fiber'

type GLTFResult = GLTF & {
  nodes: {
    Sphere: THREE.Mesh
  }
  materials: {
    Planet: THREE.MeshStandardMaterial
  }
}

export default function Model({ ...props }: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>()
  const [model, setModel] = useState<Object3D | null>(null)
  const [cloudModel, setCloudModel] = useState<Object3D | null>(null)

  useEffect(() => {
    const loader = new ObjectLoader()
    loader.load('earth.obj', (glb) => {
      //const nodes = await glb.parser.getDependencies('node')
      setModel(glb)
      //setCloudModel(nodes[1])
    })
  }, [])

  useFrame((_, delta) => {
    if (group.current) {
    }
  })
  return (
    <>
      {model ? (
        <>
          <group ref={group} position={[0, 0, 0]} scale={1}>
            <primitive ref={group} name={'Earth_Object01'} object={model} />
          </group>
          
        </>
      ) : (
        <Html>LOADING...</Html>
      )}
    </>
  )
}

/*
<group ref={group} {...props} dispose={null}>
      <group position={[0.87, 3.3, -5.6]} rotation={[-0.33, 0.42, -1.42]}>
        <directionalLight intensity={5} decay={2} rotation={[-Math.PI / 2, 0, 0]} />
      </group>
      <mesh geometry={nodes.Sphere.geometry} material={materials.Planet} />
    </group>
*/

useGLTF.preload('/Earth_01.glb')
